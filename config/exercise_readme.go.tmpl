# {{ .Spec.Name }}

{{ .Spec.Description -}}
{{- with .Hints }}
{{ . }}
{{ end }}
## Rust Installation

Refer to the [exercism help page][help-page] for Rust installation and learning
resources.

## Writing the Code

Execute the tests with:

```bash
$ cargo test
```

All but the first test have been ignored. After you get the first test to
pass, open the tests source file which is located in the `tests` directory
and remove the `#[ignore]` flag from the next test and get the tests to pass
again. Each separate test is a function with `#[test]` flag above it.
Continue, until you pass every test.

If you wish to run all tests without editing the tests source file, use:

```bash
$ cargo test -- --ignored
```

To run a specific test, for example `some_test`, you can use:

```bash
$ cargo test some_test
```

If the specific test is ignored use:

```bash
$ cargo test some_test -- --ignored
```

To learn more about Rust tests refer to the [online test documentation][rust-tests]

Make sure to read the [Modules](https://doc.rust-lang.org/book/ch07-02-modules-and-use-to-control-scope-and-privacy.html) chapter if you
haven't already, it will help you with organizing your files.

## Writing well-formatted code

When you are solving the exercise, you are free to choose any coding format you want.
However when you are writing a real-world application or a library, your source code will
be read by other people, not just you. To solve a problem when different people choose
different formats for a single project, the developers set a standard coding format
for the said project.

In the Rust world there is a tool, that helps developers to bring standard formatting
to their applications - [rustfmt](https://github.com/rust-lang/rustfmt).

To install `rustfmt` use the following commands:

```bash
rustup self update

rustup component add rustfmt
```

After you have installed `rustfmt` and have solved the exercise, please consider
using the following command inside the exercise directory to format your final solution:

```bash
cargo fmt
```

## Writing effective code

At its core the process of programming consists of two parts: storing and managing
the resources of your computer. Rust provides a lot of means to accomplish these two
task. Unfortunately sometimes programmers do not use those means very effectively and
create programms that work correctly, but require a lot of resources like memory or time.

To catch the most common ineffective usages of the Rust language,
a tool was created - [clippy](https://github.com/rust-lang/rust-clippy).

To install `clippy` use the following commands:

```bash
rustup self update

rustup component add clippy
```

After you have installed `clippy` and have solved the exercise, please consider
using the following command to see, if your solution could be improved in some way:

```bash
cargo clippy --all-targets
```

## Feedback, Issues, Pull Requests

The [exercism/rust](https://github.com/exercism/rust) repository on GitHub is the home for all of the Rust exercises. If you have feedback about an exercise, or want to help implement new exercises, head over there and create an issue. Members of the rust track team are happy to help!

If you want to know more about Exercism, take a look at the [contribution guide](https://github.com/exercism/docs/blob/master/contributing-to-language-tracks/README.md).

[help-page]: https://exercism.io/tracks/rust/learning
[modules]: https://doc.rust-lang.org/book/ch07-02-modules-and-use-to-control-scope-and-privacy.html
[cargo]: https://doc.rust-lang.org/book/ch14-00-more-about-cargo.html
[rust-tests]: https://doc.rust-lang.org/book/ch11-02-running-tests.html
{{ with .Spec.Credits }}
## Source

{{ . }}
{{ end }}
## Submitting Incomplete Solutions
It's possible to submit an incomplete solution so you can see how others have completed the exercise.
