#!/usr/bin/env bash

# Exit if anything fails.
set -euo pipefail


# shellcheck source=./generator-utils/utils.sh
source ./bin/generator-utils/utils.sh

digest_template() {
  template=$(cat bin/test_template)
  # turn every token into a jq command
  echo "$template" | sed 's/${\([^}]*\)\}\$/$(echo $case | jq -r '\''.\1'\'')/g'
}

canonical_json=$(cat canonical_data.json)
SLUG=$(echo "$canonical_json" | jq '.exercise')
# shellcheck disable=SC2001
# Remove double quotes
SLUG=$(echo "$SLUG" | sed 's/"//g')
EXERCISE_DIR="exercises/practice/$SLUG"
TEST_FILE="$EXERCISE_DIR/tests/$SLUG.rs"
rm "$TEST_FILE"

cat <<EOT >"$TEST_FILE"
use $(dash_to_underscore "$SLUG")::*;
// Add tests here

EOT

# Flattens canonical json, extracts only the objects with a uuid
CASES=$(echo "$CANONICAL_JSON" | jq '[ .. | objects | with_entries(select(.key | IN("uuid", "description", "input", "expected", "property"))) | select(. != {}) | select(has("uuid")) ]')

# shellcheck disable=SC2034
jq -c '.[]' <<<"$CASES" | while read -r case; do

  # Evaluate the bash parts and replace them with their return values
  EVAL_TEMPLATE="$(digest_template | sed -e "s/\$(\(.*\))/\$\(\1\)/g")"
  EVAL_TEMPLATE="$(eval "echo \"$EVAL_TEMPLATE\"")"

  # Turn function name unto snake_case
  FORMATTED_TEMPLATE=$(echo "$EVAL_TEMPLATE" | sed -e ':loop' -e 's/\(fn[^(]*\)[ -]/\1_/g' -e 't loop' | sed 's/fn_/fn /')
  # Push to file

  echo "$FORMATTED_TEMPLATE" >>"$TEST_FILE"
  printf "\\n" >>"$TEST_FILE"

done

rustfmt "$TEST_FILE"
