#!/usr/bin/env bash

# shellcheck source=/dev/null
source ./bin/generator-utils/utils.sh

function digest_template() {
  template=$(cat bin/generator-utils/test_template)
  # shellcheck disable=SC2001
  # turn every token into a jq command
  echo "$template" | sed 's/${\([^}]*\)\}\$/$(echo $case | jq -r '\''.\1'\'')/g'
}

canonical_json=$(cat canonical_data.json)
SLUG=$(echo "$canonical_json" | jq '.exercise')
# shellcheck disable=SC2001
# Remove double quotes
SLUG=$(echo "$SLUG" | sed 's/"//g')
EXERCISE_DIR="exercises/practice/$SLUG"
TEST_FILE="$EXERCISE_DIR/tests/$SLUG.rs"
rm "$TEST_FILE"

cat <<EOT >"$TEST_FILE"
use $(dash_to_underscore "$SLUG")::*;
// Add tests here

EOT
cases=$(echo "$canonical_json" | jq '[ .. | objects | with_entries(select(.key | IN("uuid", "description", "input", "expected", "property"))) | select(. != {}) | select(has("uuid")) ]')

# shellcheck disable=SC2034
jq -c '.[]' <<<"$cases" | while read -r case; do

  # Evaluate the bash parts and replace them with their return values
  eval_template="$(digest_template | sed -e "s/\$(\(.*\))/\$\(\1\)/g")"
  eval_template="$(eval "echo \"$eval_template\"")"

  # Turn function name unto snake_case
  formatted_template=$(echo "$eval_template" | sed -e ':loop' -e 's/\(fn[^(]*\)[ -]/\1_/g' -e 't loop' | sed 's/fn_/fn /')
  # Push to file

  echo "$formatted_template" >>"$TEST_FILE"
  printf "\\n" >> "$TEST_FILE"

done

rustfmt "$TEST_FILE"
