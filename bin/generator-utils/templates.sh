#!/usr/bin/env bash

# shellcheck source=/dev/null
source ./bin/generator-utils/utils.sh

function create_test_file_template() {
    local exercise_dir=$1
    local slug=$2
    local test_file="${exercise_dir}/tests/${slug}.rs"

    cat <<EOT >"$test_file"
use $(dash_to_underscore "$slug")::*;
// Add tests here

EOT

    curlopts=(
        --silent
        --show-error
        --fail
        --location
        --retry 3
        --max-time 4 
    )
    # fetch canonical_data
    canonical_json=$(curl "${curlopts[@]}" "https://raw.githubusercontent.com/exercism/problem-specifications/main/exercises/${slug}/canonical-data.json")

    if [ "${canonical_json}" == "404: Not Found" ]; then
        canonical_json=$(jq --null-input '{cases: []}')

        cat <<EOT >>"$test_file"
// As there isn't a canonical data file for this exercise, you will need to craft your own tests.
// If you happen to devise some outstanding tests, do contemplate sharing them with the community by contributing to this repository:
// https://github.com/exercism/problem-specifications/tree/main/exercises/${slug}
EOT
    fi

    # sometimes canonical data has multiple levels with multiple `cases` arrays.
    #(see kindergarten-garden https://github.com/exercism/problem-specifications/blob/main/exercises/kindergarten-garden/canonical-data.json)
    # so let's flatten it
    cases=$(echo "$canonical_json" | jq '[ .. | objects | with_entries(select(.key | IN("uuid", "description", "input", "expected"))) | select(. != {}) | select(has("uuid")) ]')

    first_iteration=true
    # loop through each object
    jq -c '.[]' <<<"$cases" | while read -r case; do
        desc=$(echo "$case" | jq '.description' | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | tr -cd '[:alnum:]_' | sed 's/^/test_/')
        input=$(echo "$case" | jq '.input')
        expected=$(echo "$case" | jq '.expected')

        # append each test fn to the test file
        cat <<EOT >>"$test_file"
#[test] $([[ "$first_iteration" == false ]] && printf "\n#[ignore]")
fn ${desc}(){
    /*
    Input:
    ${input}

    Expected output:
    ${expected}
    */

    // TODO: Add assertion
    assert_eq!(1, 1)
}

EOT
        first_iteration=false
    done

    message "success" "Created test file template successfully!"
}

function create_lib_rs_template() {
    local exercise_dir=$1
    local slug=$2
    cat <<EOT >"${exercise_dir}/src/lib.rs"
fn $(dash_to_underscore "$slug")(){
    unimplemented!("implement ${slug} exercise")
}
EOT
    message "success" "Created lib.rs template successfully!"
}

function overwrite_gitignore() {
    local exercise_dir=$1
    cat <<EOT >"$exercise_dir"/.gitignore
# Generated by Cargo
# Will have compiled files and executables
/target/
**/*.rs.bk

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock
Cargo.lock
EOT
    message "success" "Overwrote .gitignore successfully!"
}

function create_example_rs_template() {
    exercise_dir=$1
    mkdir "${exercise_dir}/.meta"
    touch "${exercise_dir}/.meta/example.rs"
    cat <<EOT >"${exercise_dir}/.meta/example.rs"
// Create a solution that passes all the tests
EOT
    message "success" "Created example.rs file"
}
