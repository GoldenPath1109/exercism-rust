#!/usr/bin/env bash

# shellcheck source=/dev/null
source ./bin/generator-utils/utils.sh

function create_test_file_template() {
    local exercise_dir=$1
    local slug=$2
    local test_file="${exercise_dir}/tests/${slug}.rs"

    cat <<EOT >"$test_file"
use $(dash_to_underscore "$slug")::*;
// Add tests here
EOT

    # fetches canonical_data
    canonical_json=$(curl https://raw.githubusercontent.com/exercism/problem-specifications/main/exercises/"$slug"/canonical-data.json)

    if [ "${canonical_json}" == "404: Not Found" ]; then
        canonical_json=$(jq --null-input '{cases: []}')

        cat <<EOT >>"$test_file"

// This exercise doesn't have a canonical data file, which means you need to come up with tests
// If you came up with excellent tests, consider contributing to this repo:
// https://github.com/exercism/problem-specifications/tree/main/exercises/${slug}
EOT
    fi

    # sometimes canonical data has multiple levels with multiple `cases` arrays.
    # this "flattens" it
    cases=$(echo "$canonical_json" | jq '[ .. | objects | with_entries(select(.key | IN("uuid", "description", "input", "expected"))) | select(. != {}) | select(has("uuid")) ]')

    first_iteration=true
    jq -c '.[]' <<<"$cases" | while read -r case; do
        desc=$(echo "$case" | jq '.description' | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | tr -cd '[:alnum:]_' | sed 's/^/test_/')
        input=$(echo "$case" | jq '.input')
        expected=$(echo "$case" | jq '.expected')

        cat <<EOT >>"$test_file"
#[test] $([[ "$first_iteration" == false ]] && printf "\n#[ignore]")
fn ${desc}(){
    /*

    Input:
    ${input}

    Expected output:
    ${expected}

    */

    // TODO: Add assertion
    assert_eq!(1, 1)
}

EOT
        first_iteration=false
    done
}

function create_lib_rs_template() {
    local exercise_dir=$1
    local slug=$2
    cat <<EOT >"${exercise_dir}/src/lib.rs"
fn $(dash_to_underscore "$slug")(){
    unimplemented!("implement ${slug} exercise")
}
EOT
}

function create_gitignore_template() {
    local exercise_dir=$1
    cat <<EOT >"$exercise_dir"/.gitignore
# Generated by Cargo
# Will have compiled files and executables
/target/
**/*.rs.bk

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here http://doc.crates.io/guide.html#cargotoml-vs-cargolock
Cargo.lock
EOT
}
